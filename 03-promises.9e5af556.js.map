{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAkBAC,SAASC,cAAc,SAASC,iBAAiB,UAAUC,MAAMC,IAC/DA,EAAMC,iBAEN,IAAIC,EAAaC,SACfP,SAASC,cAAc,uBAAuBO,OAEhD,MAAMC,EAAOF,SAASP,SAASC,cAAc,sBAAsBO,OAC7DE,EAASH,SAASP,SAASC,cAAc,wBAAwBO,OAEjEG,EAAgBR,MAAOS,EAAUC,KACrC,IACE,MAAMC,QA3BZ,SAAuBF,EAAUC,GAC/B,OAAO,IAAIE,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAgBC,KAAKC,SAAW,GAEhCP,EAAS,C,SAAEF,E,MAAUC,GAEvBM,EACFH,EAAQF,GAERG,EAAOH,EAAO,GAEfD,EAAM,G,CAecS,CAAcV,EAAUC,GAEvCU,EAAmB,qBAAqBT,EAAOF,eAAeE,EAAOD,UAC3EW,EAAA1B,GAAS2B,OAAOC,QAAQH,EAAkB,CACxCI,qBAAsB,K,CAExB,MAAOC,GACP,MAAMhB,SAAEA,EAAQC,MAAEA,GAAUe,EACtBC,EAAkB,oBAAoBjB,QAAeC,MAC3DW,EAAA1B,GAAS2B,OAAOK,QAAQD,EAAiB,CACvCF,qBAAsB,K,GAK5B,IAAK,IAAII,EAAI,EAAGA,GAAKrB,EAAQqB,UACrBpB,EAAcoB,EAAGzB,GAEvBA,GAAcG,QAER,IAAIM,SAAQC,GAAWE,WAAWF,EAASP,I","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      const result = { position, delay };\n\n      if (shouldResolve) {\n        resolve(result);\n      } else {\n        reject(result);\n      }\n    }, delay);\n  });\n}\n\ndocument.querySelector('.form').addEventListener('submit', async event => {\n  event.preventDefault();\n\n  let firstDelay = parseInt(\n    document.querySelector('input[name=\"delay\"]').value\n  );\n  const step = parseInt(document.querySelector('input[name=\"step\"]').value);\n  const amount = parseInt(document.querySelector('input[name=\"amount\"]').value);\n\n  const handlePromise = async (position, delay) => {\n    try {\n      const result = await createPromise(position, delay);\n\n      const fulfilledMessage = `Fulfilled promise ${result.position} in ${result.delay}ms`;\n      Notiflix.Notify.success(fulfilledMessage, {\n        cssAnimationDuration: 500,\n      });\n    } catch (error) {\n      const { position, delay } = error;\n      const rejectedMessage = `Rejected promise ${position} in ${delay}ms`;\n      Notiflix.Notify.failure(rejectedMessage, {\n        cssAnimationDuration: 500, //\n      });\n    }\n  };\n\n  for (let i = 1; i <= amount; i++) {\n    await handlePromise(i, firstDelay);\n\n    firstDelay += step;\n\n    await new Promise(resolve => setTimeout(resolve, step));\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","async","event","preventDefault","firstDelay","parseInt","value","step","amount","handlePromise","position","delay","result","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","$47d4ff9957288465$var$createPromise","fulfilledMessage","$parcel$interopDefault","Notify","success","cssAnimationDuration","error","rejectedMessage","failure","i"],"version":3,"file":"03-promises.9e5af556.js.map"}